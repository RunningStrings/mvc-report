<a id="kmom01"></a>Kmom01
--------------------------
I och med att jag *precis* har gått kursen oopython, som har fokus på
just objektorientering, så kommer mina huvudsakliga förkunskaper kring
objektorientering därifrån. Ämnet dök också upp en del under
höstens JavaScript-kurs, framförallt i den senare delen av kursen. Det
är generellt ett väldigt trevligt och tillfredsställande koncept när man
får det att fungera - både att organisera koden efter syfte och därigenom
få bättre överskådlighet, och att kunna hantera kodens delar separerade
från varandra.

En klass är ett slags ritning eller instruktion för konstruktionen av objekt.
Klasser skapar struktur, och varje objekt är en instans av en klass. Genom
metoder definierar klassen vad som kan göras med objektet, och genom variabler
definieras objektets "state", eller värdet av de variabler som innefattas i objektet. 
Man skapar en klass i PHP med nyckelordet "class", följt av namnet på klassen, därefter 
skapar man klassvariabler för att lagra data och metoder för att hantera samma data, 
och dessa definieras med nyckelord som bestämmer deras "synlighet" - public, private 
eller protected.

I stora drag har det varit relativt smärtfritt att komma igång med Symfony - 
övningen och genomgången tillhandahöll grundarbetet, och i och med att vi använde 
Pico och Twig under designkursen kändes konceptet, och i stora drag strukturen, 
bekant. Jag valde att i stora delar plocka in styling och layout från min portfolio 
i designkursen, inklusive Sass, och jag hittade även en föreläsning från förra årets 
kursvända där Mikael gick igenom hur man kan implementera Markdown i rapportsidan - 
mycket användbart! Det verkar överhuvudtaget finnas väldigt många verktyg och möjligheter, 
och samtidigt hade det varit ganska enkelt att skapa en webbplats från grunden, utan att 
plocka in kod från andra projekt, med det som tillhandahålls när man startar ett nytt 
Symfonyprojekt.

I princip känns nog hela artikeln "PHP The Right Way" värdefull - den verkar
ge en ingående och bred grund, med många hänvisningar till ytterligare resurser. Avsnittet
"Getting Started" är ju ett väldigt trevligt cheat sheet för att komma igång, och 
"Coding Practices" för att få koll på grundläggande principer. Nu kan jag bara uttala 
mig som ny på området, men oavsett erfarenhet ska man aldrig underskatta en bra fusklapp.
Annars är jag nyfiken på Security-avsnittet - vad man måste tänka på, och hur man 
förebygger olika problem och risker - men även avsnittet om testning, då vi fick lära oss 
lite om enhetstestning i oopython-kursen, och det ska bli intressant att få bygga vidare 
på de kunskaperna i den här kursen. Men överlag verkar det mesta spännande.

Min TIL för det här kursmomentet är värdet av att inte krångla till saker
i onödan. Kan tyckas självklart, men ibland när man sitter och funderar på
detaljer kan det vara lätt att missa enkla lösningar, som ofta dyker upp
bara man ser till det större sammanhanget. Och läser manualen. Som till 
exempel när jag började arbeta med Symfony och Twig - jag började göra 
ganska krångliga lösningar för att kunna använda Sass och Markdown smidigt, 
men efter en påminnelse om att det finns dokumentation, så gick det bättre, 
och med mindre huvudvärk.